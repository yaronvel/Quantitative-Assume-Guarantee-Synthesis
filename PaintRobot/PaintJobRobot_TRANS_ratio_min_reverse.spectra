module PaintJobRobot3

/**
 * Robot with arms that color pieces. Change of color has to be supported (dimensions of arrays are number of robot arms).
 * 
 * This example is modified with a reduction from 
 *  - ratio objective with
 *  -- minimum over assumptions 
 *  -- average over guarantees
 * 
 * NOTE The reduction from the ratio objective requires to reverse the players. A GR(1) counter-strategy is the winning strategy of the system player.   
 * 
 * This specification expresses value 3/1 (if both assumptions are satisfied (value 1), 3 guarantees will be satisfied).
 * 
 * To change the ration modify parameters p=3 and q=1 on the bottom of the file.
 * 
 * Note that min only allows values 0 and 1 where for 0 nothing needs to be implemented.
 * 
 * The auxiliary variables a^s_{r,i} (only needed for r=1) and are encoded in arrays aS[i].
 */

define
  c1 := tool[0] < 128 & tool[1] < 128;
  c2 := tool[0] < 128 & tool[1] >= 128;
  c3 := tool[0] >= 128 & tool[1] < 128;
  c4 := tool[0] >= 128 & tool[1] >= 128;
  
// flag whether change of dynamic color is allowed
sys boolean[2] chg;

gar
  G !(chg[0] & chg[1]);

env Int(0..255)[2] tool;

asm
  G !chg[0] -> next(tool[0])=tool[0];
asm
  G !chg[1] -> next(tool[1])=tool[1];  

// values records for system guarantees for each r=1, 2
aux Int(0..1)[4] aSR1;

define
  doResetASR1 :=aSR1[0]=0 & aSR1[1]=0 & aSR1[2]=0 & aSR1[3]=0;
  sumASR1 := aSR1[0] +  aSR1[1] + aSR1[2] + aSR1[3];

gar
  doResetASR1;

env boolean giveUp;

define
  geq1T := sumASR1*q >= p;

gar settingSatGF1:
  G (
    (((aSR1[0]=1 | c1) & !geq1T) -> next(aSR1[0]=1)) &
    (((aSR1[1]=1 | c2) & !geq1T) -> next(aSR1[1]=1)) &
    (((aSR1[2]=1 | c3) & !geq1T) -> next(aSR1[2]=1)) &
    (((aSR1[3]=1 | c4) & !geq1T) -> next(aSR1[3]=1)) &
    (geq1T -> next(aSR1[0]=0)) &
    (geq1T -> next(aSR1[1]=0)) &
    (geq1T -> next(aSR1[2]=0)) &
    (geq1T -> next(aSR1[3]=0))
  );
    
// assumption part
aux Int(0..1)[2] aER1;

define
  doResetAER1 := aER1[0]=0 & aER1[1]=0;
gar  
  doResetAER1;


define
  lessR1 := (aER1[0] + aER1[1] < 2);

gar settingSatGFAsm:
  G (
    (((aER1[0]=1 | chg[0]) & !(geq1T | giveUp)) <-> next(aER1[0]=1)) & 
    (((aER1[1]=1 | chg[1]) & !(geq1T | giveUp)) <-> next(aER1[1]=1))
  );

asm
  GF lessR1;

//FG !giveUp;  
gar
  GF giveUp;

define // threshold is p/q
  p := 3;
  q := 1;
